package af.web.jsx;

import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.json.JSONArray;
//import org.json.JSONObject;
import org.json.JSONObject;

import af.web.AfQueryParams;

public class AfJsxService extends HttpServlet
{
	protected HashMap<String, ConfigItem> configs = new HashMap<String, ConfigItem>();

	@Override
	public void init() throws ServletException
	{
		// 从xml配置文件中读取配置
		try
		{
			loadConfig();
		} catch (Exception e)
		{
			e.printStackTrace();
			throw new Error("af-service.xml 格式不正确! 启动终止启动!");
		}
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
	{
		String strResp = null;
		
		try
		{
			// 从URL中解析服务的名字
			String servletPath = request.getServletPath();
			int p1 = servletPath.lastIndexOf('/');
			int p2 = servletPath.lastIndexOf('.');
			String serviceName = servletPath.substring(p1 + 1, p2);
	
			// 创建服务类的对象, 处理该请求
			ConfigItem cfg = configs.get(serviceName);
			if (cfg == null)
				throw new Exception("上传服务: " + serviceName + "在af-service.xml里尚未配置!");

			AfJsxCreator instance = null;
			try
			{
				instance = (AfJsxCreator) cfg.clazz.newInstance();
			} catch (InstantiationException e)
			{
				e.printStackTrace();
				throw new Exception(cfg.clazzName + "无法实例化, 请确保构造方法不带参数!");
			} catch (IllegalAccessException e)
			{
				e.printStackTrace();
				throw new Exception(cfg.clazzName + "无法实例化, 请确保构造方法为public!");
			} catch (ClassCastException e)
			{
				e.printStackTrace();
				throw new Exception(cfg.clazzName + "必须是  AfJxCreator 的子类(或子类的子类)!");
			} catch (Exception e)
			{
				e.printStackTrace();
				throw new Exception("在创建 " + cfg.clazzName + "实例的时候出错!请检查构造方法是否有异常!");
			}

			// 读取URL里的参数  user.jsx?id=12
			String query = request.getQueryString();
//			HashMap<String, String> queryParams = AfWebUtils.parseQuery(query, cfg.charset);

			// 处理请求
			instance.httpReq = request;
			instance.httpResp = response;
			instance.queryParams = AfQueryParams.from(query, cfg.charset);
			instance.charset = cfg.charset;

			request.setCharacterEncoding(cfg.charset);
			Object data = instance.execute();
			
			// 后缀为".jsx"    -> 输出  var xxx = {}
			// 后缀为".jsonx"  -> 输出 {}
			String suffix = servletPath.substring(p2+1);
			boolean isJSONFormat = "jsonx".equals(suffix);
			
			String jsonstr = null;
			if(isJSONFormat)
			{
				if(data == null)
					strResp = "";
				else
					strResp = toJSONString(data);
			}
			else 
			{
				if(data == null) 
					strResp = "var " + serviceName + " = null;" ;
				else
					strResp = "var " + serviceName + " = " + toJSONString(data) +";";
			
			}
			
		} catch (Exception e)
		{
			JSONObject result = new JSONObject();
			result.put("error", -1);
			result.put("reason", e.getMessage());
			strResp = result.toString();
		}

		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/plain");
		PrintWriter out = response.getWriter();
		out.write(strResp);
		out.close();
	}

	private String toJSONString (Object data ) throws Exception
	{
		if(data instanceof JSONObject)
			return ((JSONObject)data).toString(2);
		else if(data instanceof JSONArray)
			return ((JSONArray)data).toString(2);
		else
			throw new Exception("JSX必须返回一个JSONObject或JSONArray!");
			
	}
	/////////////////////////////////////
	private static class ConfigItem
	{
		public String name; // 服务接口名
		public String clazzName;
		public Class clazz; // 类的实体
		public String charset = "UTF-8";
	}

	// 从 af-service.xml 中获取配置
	private void loadConfig() throws Exception
	{
		InputStream stream = this.getClass().getResourceAsStream("/af-service.xml");
		SAXReader reader = new SAXReader();
		Document doc = reader.read(stream);
		stream.close();

		Element root = doc.getRootElement();
		List<Element> xServiceList = root.elements("jsx");
		for (Element e : xServiceList)
		{
			ConfigItem cfg = new ConfigItem();
			cfg.name = e.attributeValue("name");
			cfg.clazzName = e.attributeValue("class");

			try
			{
				// 加载类的信息
				cfg.clazz = Class.forName(cfg.clazzName);

				// 检查是不是 AfFileUploadHandler 的子类
				if (cfg.clazz.isAssignableFrom(AfJsxCreator.class))
					throw new Exception("类" + cfg.clazzName + "不是AfJsxCreator的子类!无法加载!");

				configs.put(cfg.name, cfg);
			} catch (Exception ex)
			{
				ex.printStackTrace();
				throw new Exception("类 " + cfg.clazzName + "不存在!");
			}
		}
	}

}
